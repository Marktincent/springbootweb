buildscript {
    ext {
        springBootVersion = '2.0.3.RELEASE'
    }
    repositories {
        //mavenCentral()
        maven { url "http://174.34.75.104:8765/repository/maven-releases/" }
        maven { url "http://174.34.75.104:8765/repository/uaes-ne1-esw/" }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

group = 'com.uaes.esw'
version = '0.0.1'
sourceCompatibility = 1.8

configurations {
    mybatisGenerator
}
repositories {
//	mavenCentral()
    maven { url "http://174.34.75.104:8765/repository/uaes-ne1-esw/" }
    maven { url "http://174.34.75.104:8765/repository/maven-releases/" }
    maven { url "http://174.34.75.104:8765/repository/ne1-uaes-jira/" }
//	maven {url "http://localhost:8765/repository/uaes-ne1-esw/"}
//	maven {url "http://localhost:8765/repository/maven-releases/"}
}
ext {
    springCloudVersion = 'Finchley.RELEASE'
}

dependencies {
    compile('org.springframework.boot:spring-boot-starter-web')
    //compile('org.springframework.boot:spring-boot-starter-data-jpa')
    compile('org.springframework.boot:spring-boot-starter-thymeleaf')
    compile('org.mybatis.spring.boot:mybatis-spring-boot-starter:1.3.2')
    compile group: 'org.mybatis.generator', name: 'mybatis-generator-core', version: '1.3.5'
    compile group: 'com.github.pagehelper', name: 'pagehelper-spring-boot-starter', version: '1.2.5'
    compile('org.springframework.cloud:spring-cloud-starter-netflix-eureka-client')
    compile group: 'com.sun.jndi.ldap', name: 'ldapbp', version: '1.0'

    compile('org.springframework.boot:spring-boot-devtools')

    // ---------qrcode------------start-----------
    compile group: 'com.google.zxing', name: 'core', version: '3.3.0'
    compile group: 'com.google.zxing', name: 'javase', version: '3.3.0'
    compile group: 'net.coobird', name: 'thumbnailator', version: '0.4.8'
    // ---------qrcode------------end-----------

    /* redis */
//	compile('org.springframework.boot:spring-boot-starter-data-redis')
//	compile('org.springframework.session:spring-session-data-redis')

    /* springboot分页插件 */
    compile group: 'com.github.pagehelper', name: 'pagehelper-spring-boot-starter', version: '1.2.5'

    runtime('mysql:mysql-connector-java')
    compileOnly('org.projectlombok:lombok')
    testCompile('org.springframework.boot:spring-boot-starter-test')
    compile group: 'com.oracle', name: 'ojdbc6', version: '11.2.0.3'
    compile group: 'org.postgresql', name: 'postgresql', version: '42.1.4'
    mybatisGenerator 'org.mybatis.generator:mybatis-generator-core:1.3.5'
    mybatisGenerator 'mysql:mysql-connector-java:5.1.46'
    mybatisGenerator 'tk.mybatis:mapper:3.3.9'
    compile group: 'com.sun', name: 'ldapbp', version: '1.0'
    compile group: 'ldapsdk', name: 'ldapsdk', version: '4.1'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}


def getDbProperties = {
    def properties = new Properties()
    file("src/main/resources/mybatis/jdbc.properties").withInputStream { inputStream ->
        properties.load(inputStream)
    }
    properties
}

task mybatisGenerate << {
    def properties = getDbProperties()
    ant.properties['targetProject'] = projectDir.path
    ant.properties['driverClass'] = properties.getProperty("jdbc.driverClassName")
    ant.properties['connectionURL'] = properties.getProperty("jdbc.url")
    ant.properties['userId'] = properties.getProperty("jdbc.username")
    ant.properties['password'] = properties.getProperty("jdbc.password")
    ant.properties['src_main_java'] = sourceSets.main.java.srcDirs[0].path
    ant.properties['src_main_resources'] = sourceSets.main.resources.srcDirs[0].path
    ant.properties['modelPackage'] = properties.getProperty("package.model")
    ant.properties['mapperPackage'] = properties.getProperty("package.mapper")
    ant.properties['sqlMapperPackage'] = properties.getProperty("package.xml")

    ant.properties['driverClass_Oracle'] = properties.getProperty("oracle.driverClassName")
    ant.properties['connectionURL_Oracle'] = properties.getProperty("oracle.url")
    ant.properties['userId_Oracle'] = properties.getProperty("oracle.username")
    ant.properties['password_Oracle'] = properties.getProperty("oracle.password")

    ant.properties['driverClass_postgres'] = properties.getProperty("postgres.driverClassName")
    ant.properties['connectionURL_postgres'] = properties.getProperty("postgres.url")
    ant.properties['userId_postgres'] = properties.getProperty("postgres.username")
    ant.properties['password_postgres'] = properties.getProperty("postgres.password")

    ant.taskdef(
            name: 'mbgenerator',
            classname: 'org.mybatis.generator.ant.GeneratorAntTask',
            classpath: configurations.mybatisGenerator.asPath
    )
    /*ant.mbgenerator(overwrite: true,
            configfile: 'src/main/resources/mybatis/generatorConfig_mysql.xml', verbose: true) {
        propertyset {
            propertyref(name: 'targetProject')
            propertyref(name: 'userId')
            propertyref(name: 'driverClass')
            propertyref(name: 'connectionURL')
            propertyref(name: 'password')
            propertyref(name: 'src_main_java')
            propertyref(name: 'src_main_resources')
            propertyref(name: 'modelPackage')
            propertyref(name: 'mapperPackage')
            propertyref(name: 'sqlMapperPackage')
        }
    }*/

    /*ant.mbgenerator(overwrite: true,
            configfile: 'src/main/resources/mybatis/generatorConfig_oracle.xml', verbose: true) {
        propertyset {
            propertyref(name: 'targetProject')
            propertyref(name: 'userId_Oracle')
            propertyref(name: 'driverClass_Oracle')
            propertyref(name: 'connectionURL_Oracle')
            propertyref(name: 'password_Oracle')
            propertyref(name: 'src_main_java')
            propertyref(name: 'src_main_resources')
            propertyref(name: 'modelPackage')
            propertyref(name: 'mapperPackage')
            propertyref(name: 'sqlMapperPackage')
        }
    }*/

    /*ant.mbgenerator(overwrite: true,
            configfile: 'src/main/resources/mybatis/generatorConfig_postgres.xml', verbose: true) {
        propertyset {
            propertyref(name: 'targetProject')
            propertyref(name: 'userId_postgres')
            propertyref(name: 'driverClass_postgres')
            propertyref(name: 'connectionURL_postgres')
            propertyref(name: 'password_postgres')
            propertyref(name: 'src_main_java')
            propertyref(name: 'src_main_resources')
            propertyref(name: 'modelPackage')
            propertyref(name: 'mapperPackage')
            propertyref(name: 'sqlMapperPackage')
        }
    }*/
}
